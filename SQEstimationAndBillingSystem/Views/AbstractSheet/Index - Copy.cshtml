@model IEnumerable<SQEstimationAndBillingSystem.Models.AbstractSheetModel>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/slick.grid.css" rel="stylesheet" />
<link href="~/Content/jquery-ui-1.12.1/jquery-ui.css" rel="stylesheet" />
<link href="~/Content/slick.pager.css" rel="stylesheet" />
<style>
    .cell-title {
        font-weight: bold;
    }

    .cell-effort-driven {
        text-align: center;
    }

    .cell-selection {
        border-right-color: silver;
        border-right-style: solid;
        background: #f5f5f5;
        color: gray;
        text-align: right;
        font-size: 10px;
    }
</style>

@Html.Hidden("hdnCreateEditURL", Url.Action("CreateEdit", "AbstractSheet"))
@Html.Hidden("hdnDeleteURL", Url.Action("DeleteAbstractSheet", "AbstractSheet"))
<section class="content-header">
    <h1>
        Abstract Sheet
        <small>List</small>
    </h1>
</section>
<div class="row">
    <div class="col-xs-12" style="text-align:right; margin:5px">
        <input type="button" value="Add New Abstract Sheet" onclick="AddNew()" />
    </div>

</div>
<div class="row">
    <div class="col-xs-12">
        <div class="box">
            <div class="box-body" id="divAbstractSheet">
                <label>Search: </label>
                <input type=text id="txtSearch" style="width:200px;">
                <div id="AbstractSheetgrid" style="width:100%;height:400px;"></div>
                <div id="pager" style="width:100%;height:20px;"></div>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/jquery-ui-1.12.1/jquery-ui.min.js"></script>
<script src="~/Scripts/jquery.event.drag.js"></script>

<script src="~/Scripts/SlickGrid/slick.core.js"></script>
<script src="~/Scripts/SlickGrid/slick.formatters.js"></script>
<script src="~/Scripts/SlickGrid/slick.grid.js"></script>
<script src="~/Scripts/SlickGrid/slick.dataview.js"></script>
<script src="~/Scripts/SlickGrid/Controls/slick.pager.js"></script>

<script>

    $(document).ready(function () {
        LoadGridData();
    });

       function AddNew() {
        document.location.href = "/AbstractSheet/CreateEdit";
    }
      function DateFormatter (row, cell, value, columnDef, dataContext) {
      if (value) {
          var myDate = (new Date(parseInt(value.substr(6), 10)));
          var dateStr = (myDate.getMonth() + 1) + "/" + myDate.getDate() + "/" + myDate.getFullYear();
                                return dateStr;
                            } else {
                                return null;
                            }
       }

    function LoadGridData() {
        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetAllAbstractSheetDetails", "AbstractSheet")',
            success: function (response) {
                var dataView;
                var grid;
                var data = [];
                var columns = [
                     {
                        id: "img", name: "Edit", field: "src",
                         formatter: function (row, cell, value, columnDef, dataContext) {
                             var url = $("#hdnCreateEditURL").val() + "/"+dataContext.id;
                            return '<img src="../content/images/edit.svg" height="20px"><a href="'+url+'">Edit</a></img>';
                        }
                    },
                       {
                        id: "img", name: "Delete", field: "src",
                           formatter: function (row, cell, value, columnDef, dataContext) {

                            return '<img src="../content/images/delete.svg" height="20px"><a data-deleteId="'+dataContext.id+'" href="#" onclick="DeleteConfirm(this);">Delete</a></img>';
                        }
                    },
                    { id: "id", name: "id", field: "id", cssClass: "cell-title", resizable: false, minWidth: 100, sortable: true },
                    { id: "ProjectName", name: "Project Name", field: "ProjectName", resizable: false, minWidth: 150, sortable: true },
                    { id: "Quantity", name: "Quantity", field: "Quantity", resizable: false, minWidth: 150, sortable: true },
                    { id: "Rate", name: "Rate", field: "Rate", resizable: false, minWidth: 120, sortable: true },
                    { id: "Unit", name: "Unit", field: "Unit", resizable: false, minWidth: 120, sortable: true },
                    { id: "Amount", name: "Amount", field: "Amount", resizable: false, minWidth: 120, sortable: true },
                    { id: "ModifiedBy", name: "Modified By", field: "ModifiedBy", resizable: false, minWidth: 120, sortable: true },
                    {
                        id: "ModifiedOn", name: "Modified On", field: "ModifiedOn", resizable: false, minWidth: 200, sortable: true
                        , formatter: DateFormatter
                    }
                 ];
                var options = {
                    editable: false,
                    enableAddRow: false,
                    enableCellNavigation: true,
                    multiColumnSort: true
                };
                var percentCompleteThreshold = 0;
                var prevPercentCompleteThreshold = 0;
                var h_runfilters = null;
                 var searchString = '';
                function myFilter(item, args) {
                    if (args.searchString != "" && (item["ProjectName"].toString().indexOf(args.searchString) == -1
                        && item["Description"].toString().indexOf(args.searchString) == -1
                        && item["Quantity"].toString().indexOf(args.searchString) == -1
                         && item["Rate"].toString().indexOf(args.searchString) == -1
                         && item["Unit"].toString().indexOf(args.searchString) == -1
                         && item["Amount"].toString().indexOf(args.searchString) == -1
                         && item["ModifiedBy"].toString().indexOf(args.searchString) == -1
                         && item["ModifiedOn"].toString().indexOf(args.searchString) == -1
                    )) {
    return false;
  }

  return true;
}

                $(function () {

                    dataView = new Slick.Data.DataView({ inlineFilters: true });
                    grid = new Slick.Grid("#AbstractSheetgrid", dataView, columns, options);
                    var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
                    // wire up model events to drive the grid
                    dataView.onRowCountChanged.subscribe(function (e, args) {
                        grid.updateRowCount();
                        grid.render();
                    });
                    dataView.onRowsChanged.subscribe(function (e, args) {
                        grid.invalidateRows(args.rows);
                        grid.render();
                    });
                  
                    function filterAndUpdate() {
                        var isNarrowing = percentCompleteThreshold > prevPercentCompleteThreshold;
                        var isExpanding = percentCompleteThreshold < prevPercentCompleteThreshold;
                        var renderedRange = grid.getRenderedRange();
                        dataView.setFilterArgs(percentCompleteThreshold);
                        dataView.setRefreshHints({
                            ignoreDiffsBefore: renderedRange.top,
                            ignoreDiffsAfter: renderedRange.bottom + 1,
                            isFilterNarrowing: isNarrowing,
                            isFilterExpanding: isExpanding
                        });
                        dataView.refresh();
                        prevPercentCompleteThreshold = percentCompleteThreshold;
                    }


                         // wire up the search textbox to apply the filter to the model
  $("#txtSearch").keyup(function (e) {

    // clear on Esc
    if (e.which == 27) {
      this.value = "";
    }

    searchString = this.value;
    updateFilter();
  });

  function updateFilter() {
    dataView.setFilterArgs({
      searchString: searchString
    });
    dataView.refresh();
  }
                    // initialize the model after all the events have been hooked up
                    dataView.beginUpdate();
                    dataView.setItems(response);
                    dataView.setFilterArgs({
    searchString: searchString
  });
                    dataView.setFilter(myFilter);

                    dataView.endUpdate();
                })
            },
            error: function (result) {
                toastr.error("ajaxError");
            }
        });
    }

       function DeleteConfirm(obj) {
        bootbox.confirm({
            title: "Confirmation",
            message: "Are you sure you want to delete this record?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: ' mybtn bootboxbutton'
                },
                cancel: {
                    label: 'No',
                    className: ' cancelbtn bootboxbutton'
                }
            },
            callback: function (confirmation) {
                if (confirmation) {
                    var url = $("#hdnDeleteURL").val();

                    $.ajax({
                        url: url,
                        type: 'Post',
                        dataType: "json",
                        data: { id: $(obj).attr("data-deleteId") },
                        success: function (result) {
                            if (result == "success") {
                                toastr.success("Abstract sheet deleted successfully!");
                                LoadGridData();
                            }
                            else {
                                 toastr.error("Error");
                            }
                        },
                        error: function () {
                             toastr.error("Error");
                        }
                    })
                }
            }
        })
    }
</script>
<style>
    div.slick-header {
        height: 30px;
    }

    div.slick-header-column {
        height: 100% !important;
    }

    span.slick-pager-nav {
        padding: 0px !important;
    }

    span.slick-pager-settings {
        padding: 0px !important;
    }

    #AbstractSheetgrid {
        font-size: small !important;
    }
</style>